import * as tslib_1 from "tslib";
import { HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
import { raf } from '../../util/util';
import * as ɵngcc0 from '@angular/core';
var ValueAccessor = /** @class */ (function () {
    function ValueAccessor(injector, el) {
        this.injector = injector;
        this.el = el;
        this.onChange = function () { };
        this.onTouched = function () { };
    }
    ValueAccessor.prototype.writeValue = function (value) {
        /**
         * TODO for Ionic 6:
         * Change `value == null ? '' : value;`
         * to `value`. This was a fix for IE9, but IE9
         * is no longer supported; however, this change
         * is potentially a breaking change
         */
        this.el.nativeElement.value = this.lastValue = value == null ? '' : value;
        setIonicClasses(this.el);
    };
    ValueAccessor.prototype.handleChangeEvent = function (el, value) {
        if (el === this.el.nativeElement) {
            if (value !== this.lastValue) {
                this.lastValue = value;
                this.onChange(value);
            }
            setIonicClasses(this.el);
        }
    };
    ValueAccessor.prototype._handleBlurEvent = function (el) {
        if (el === this.el.nativeElement) {
            this.onTouched();
            setIonicClasses(this.el);
        }
    };
    ValueAccessor.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    ValueAccessor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    ValueAccessor.prototype.setDisabledState = function (isDisabled) {
        this.el.nativeElement.disabled = isDisabled;
    };
    ValueAccessor.prototype.ngOnDestroy = function () {
        if (this.statusChanges) {
            this.statusChanges.unsubscribe();
        }
    };
    ValueAccessor.prototype.ngAfterViewInit = function () {
        var _this = this;
        var ngControl;
        try {
            ngControl = this.injector.get(NgControl);
        }
        catch ( /* No FormControl or ngModel binding */_a) { /* No FormControl or ngModel binding */ }
        if (!ngControl) {
            return;
        }
        // Listen for changes in validity, disabled, or pending states
        if (ngControl.statusChanges) {
            this.statusChanges = ngControl.statusChanges.subscribe(function () { return setIonicClasses(_this.el); });
        }
        /**
         * TODO Remove this in favor of https://github.com/angular/angular/issues/10887
         * whenever it is implemented. Currently, Ionic's form status classes
         * do not react to changes when developers manually call
         * Angular form control methods such as markAsTouched.
         * This results in Ionic's form status classes being out
         * of sync with the ng form status classes.
         * This patches the methods to manually sync
         * the classes until this feature is implemented in Angular.
         */
        var formControl = ngControl.control;
        if (formControl) {
            var methodsToPatch = ['markAsTouched', 'markAllAsTouched', 'markAsUntouched', 'markAsDirty', 'markAsPristine'];
            methodsToPatch.forEach(function (method) {
                if (formControl[method]) {
                    var oldFn_1 = formControl[method].bind(formControl);
                    formControl[method] = function () {
                        var params = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            params[_i] = arguments[_i];
                        }
                        oldFn_1.apply(void 0, tslib_1.__spread(params));
                        setIonicClasses(_this.el);
                    };
                }
            });
        }
    };
    tslib_1.__decorate([
        HostListener('ionBlur', ['$event.target'])
    ], ValueAccessor.prototype, "_handleBlurEvent", null);
ValueAccessor.ɵfac = function ValueAccessor_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
ValueAccessor.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ValueAccessor, hostBindings: function ValueAccessor_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("ionBlur", function ValueAccessor_ionBlur_HostBindingHandler($event) { return ctx._handleBlurEvent($event.target); });
    } } });

    return ValueAccessor;
}());
export { ValueAccessor };
export var setIonicClasses = function (element) {
    raf(function () {
        var input = element.nativeElement;
        var classes = getClasses(input);
        setClasses(input, classes);
        var item = input.closest('ion-item');
        if (item) {
            setClasses(item, classes);
        }
    });
};
var getClasses = function (element) {
    var classList = element.classList;
    var classes = [];
    for (var i = 0; i < classList.length; i++) {
        var item = classList.item(i);
        if (item !== null && startsWith(item, 'ng-')) {
            classes.push("ion-" + item.substr(3));
        }
    }
    return classes;
};
var ɵ0 = getClasses;
var setClasses = function (element, classes) {
    var classList = element.classList;
    [
        'ion-valid',
        'ion-invalid',
        'ion-touched',
        'ion-untouched',
        'ion-dirty',
        'ion-pristine'
    ].forEach(function (c) { return classList.remove(c); });
    classes.forEach(function (c) { return classList.add(c); });
};
var ɵ1 = setClasses;
var startsWith = function (input, search) {
    return input.substr(0, search.length) === search;
};
var ɵ2 = startsWith;
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,